#! /usr/bin/python3

# Copyright (C) 2015 Enrico Scholz <enrico.scholz@sigma-chemnitz.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import netrc
import pycurl
import tempfile
import time
import urllib.parse
import sys
import os
import functools
import json

class P:
    def __init__(self, uuid, short, id, tm_start = None, tm_end = None, desc = None):
        self.uuid = uuid
        self.id   = id

        if tm_start:
            self.tm_start = Date(tm_start)
        else:
            self.tm_start = None

        if tm_end:
            self.tm_end   = Date(tm_end)
        else:
            self.tm_end   = None

        self.desc     = desc
        self.short    = short

    def is_active(self, now):
        return (((self.tm_start is None) or (now >= self.tm_start)) and
                ((self.tm_end   is None) or (now <= self.tm_end)))

    def __repr__(self):
        return "%s(%s) %s | %s..%s" % (self.uuid, self.id, self.short, self.tm_start, self.tm_end)

    def __str__(self):
        return "%s(%s)\t%s" % (self.uuid, self.id, self.short)

    def __eq__(self, a):
        if isinstance(a, P):
            return ((a.uuid == self.uuid) or
                    (a.id != None and a.id == self.id) or
                    (a.short != None and a.short == self.short))
        elif isinstance(a, str):
            return self.uuid == a or self.id == a or self.short == a
        else:
            raise Exception("bad type a")


class TimeSpan:
    def __init__(self, v):
        p = v.find('X')
        if p >= 0:
            inc = TimeSpan.parse(v[:p])
            out = TimeSpan.parse(v[p+1:])
        else:
            inc = TimeSpan.parse(v)
            out = [0, 0]

        self.__start = [inc[0], out[0]]
        self.__end   = [inc[1], out[1]]

    def str_start(self):
        return TimeSpan._fmt_colon(self.__start[0])

    def str_end(self):
        return TimeSpan._fmt_colon(self.__end[0])

    def str_duration(self, idx):
        return TimeSpan._fmt_comma(self.__end[idx] - self.__start[idx])

    @staticmethod
    def _fmt_colon(n):
        return "%02u:%02u" % (n / 60, n % 60)

    def _fmt_comma(v):
        return "%u,%02u" % (v / 60, int((v % 60) / 60 * 100))

    @staticmethod
    def _parse(e):
        if e.find(':') >= 0:
            # assume HH:MM format
            t = list(map(lambda x: int(x or "0"), e.split(':', 2)))
            res = t[0] * 60 + t[1]
        elif e.find(',') >= 0:
            t = list(map(lambda x: int(x or "0"), e.split(',', 2)))
            res = t[0] * 60 + float("0.%u" % t[1]) * 60
        elif e.find('.') >= 0:
            t = list(map(lambda x: int(x or "0"), e.split('.', 2)))
            res = t[0] * 60 + float("0.%u" % t[1]) * 60
        else:
            res = int(e) * 60

        return res

    @staticmethod
    def parse(span):
        p = span.find('-')
        if p > 0:
            start = TimeSpan._parse(span[:p])
            end   = TimeSpan._parse(span[p+1:])
            p     = -1
        else:
            p = span.find('+')

        if p >= 0:
            if p == 0:
                start = 0
            else:
                start = TimeSpan._parse(span[:p])

            end   = start + TimeSpan._parse(span[p+1:])
            p     = -1

        if p == 0:
            start = 0
            end   = start + TimeSpan._parse(span)

        return (start, end)

@functools.total_ordering
class Date:
    def __init__(self, v):
        self.__date = Date.parse(v)

    def __eq__(self, tm):
        return self.__date == tm

    def __lt__(self, tm):
        return self.__date < tm

    def str(self):
        return time.strftime("%d.%m.%Y", time.localtime(self.__date))

    def str_dash(self):
        return time.strftime("%Y-%m-%d", time.localtime(self.__date))

    def __str__(self):
        return self.str()

    @staticmethod
    def _parse(d):
        parts = d.split('.')
        if parts[-1] == '':
            parts = parts[:-1]

        parts = list(map(lambda x: int(x), parts))

        if len(parts) == 1:
            return (NOW[0], NOW[1], parts[0])
        elif len(parts) == 2:
            return (NOW[0], parts[1], parts[0])
        elif len(parts) == 3:
            return (parts[2], parts[1], parts[0])
        else:
            raise Exception("bad time %s" % d)

    @staticmethod
    def parse(d):
        (year, month, day) = Date._parse(d)
        return time.mktime((year, month, day,
                            0, 0, 0,
                            0, 0, -1))

class DataSet:
    def __init__(self, project, date, span, desc, notes = None):
        try:
            if project.startswith('@'):
                uuid = project[1:]
            else:
                idx = _projects.index(project)
                uuid = _projects[idx].uuid
        except ValueError:
            print("No such project; available ones:\n" +
                  '\n'.join(map(lambda x: "  %s" %x ,
                                sorted(_projects, key=lambda x: x.short))) + '\n')
            raise Exception("")

        self.__project = uuid
        self.__date    = Date(date)
        self.__span    = TimeSpan(span)
        self.__desc    = desc
        self.__notes   = notes or ""

    def url_data(self):
        return {
            "Date" : self.__date.str(),
            "From" : self.__span.str_start(),
            "To"   : self.__span.str_end(),
            "Effort" : self.__span.str_duration(0),
            "Break" : 0,
            "InternalComments" : self.__notes,
            "ExternalComments" : self.__desc,
            "NotInvoiceable" : self.__span.str_duration(1),
        }

    def xml_data(self):
        return {
            "Date" : self.__date.str_dash(),
            "ParentKey" : self.__project,
            "ParentType" : 1,
            "SkipDuplicateValidation" : "False",
            "From" : self.__span.str_start(),
            "To"   : self.__span.str_end(),
            "Effort" : self.__span.str_duration(0),
            "Break" : 0,
            "NotInvoiceable" : self.__span.str_duration(1),
            "InternalComments" : self.__notes,
            "ExternalComments" : self.__desc,
        }

    def get_project(self):
        return self.__project

    def url(self, base):
        return base + self.__project

    def xml_url(self, base):
        return base

    def url_stats(self, base):
        return base + "date=" + self.__date.str_dash()

class HttpHeader:
    def __init__(self):
        self.reset()

    def get(self, id):
        return self.__hdrs.get(id.lower(), None)

    def reset(self):
        self.__hdrs = {}
        self.__status = None

    def get_status_msg(self):
        return self.__status[2].strip().decode('iso8859-1')

    def write(self, s):
        l = len(s)
        s = s.strip()
        if s.startswith(b"HTTP/"):
            status = s[5:].split(b' ', 2)

            self.__status = (status[0], int(status[1]), status[2])
        elif s == b'':
            pass
        else:
            (key,val) = s.split(b':', 1)
            val = val.strip()
            key = key.lower()

            if key in self.__hdrs:
                self.__hdrs[key].append(val)
            else:
                self.__hdrs[key] = [val,]

        return l

    def is_redirection(self):
        return self.__status[1] == 302

    def get_redirection(self, base):
        v = self.get(b'Location')[0]
        if v.startswith(b'/') or v.startswith(b'./') or v.startswith(b'../'):
            res = base.encode() + v
        else:
            res = v

        return res

######

exec(open(os.getenv("HOME") + "/.config/tk.conf").read())

NOW_TM = time.time()
NOW = time.localtime(NOW_TM)

_projects = list(filter(lambda x: x.is_active(NOW_TM), PROJECTS))

def main():
    import argparse

    parser = argparse.ArgumentParser(description='TK CLI')

    parser.add_argument("--batch", action = 'store_const', const = 'debug',
                        default = False)
    parser.add_argument("--verbose", action = 'store_const', const = 'verbose',
                        default = False)

    parser.add_argument('project', metavar='<project>', type=str, help='project')
    parser.add_argument('date',    metavar='<date>',    type=str, help='the date')
    parser.add_argument('effort',  metavar='<effort>',  type=str, help='effort')
    parser.add_argument('desc',    metavar='<description>', type=str, help='description')
    parser.add_argument('note',    metavar='<note>',        type=str, help='description', nargs='?')

    args = parser.parse_args()

    data = DataSet(args.project, args.date, args.effort, args.desc, args.note)

    if args.verbose and not args.batch:
        print(data.get_project(), data.url_data())
        print(data.xml_data())

    cookiefile = tempfile.NamedTemporaryFile(prefix="tk")
    auth = netrc.netrc().authenticators(url[8:-1])
    hdr  = HttpHeader()

    c = pycurl.Curl()
    c.setopt(c.URL, url + "Login")
    c.setopt(c.VERBOSE, 0)
    c.setopt(c.COOKIEFILE, cookiefile.name)
    c.setopt(c.WRITEFUNCTION, lambda x: None)
    c.setopt(c.HEADERFUNCTION, hdr.write)

    # get session cookie
    hdr.reset()
    c.perform()
    assert(c.getinfo(c.HTTP_CODE) == 200)

    info = urllib.parse.urlencode({ "UserName" : auth[1],
                                    "Password" : auth[2] })
    c.setopt(c.POST, 1)
    c.setopt(c.POSTFIELDS, info)

    # get login cookie
    hdr.reset()
    c.perform()
    assert(c.getinfo(c.HTTP_CODE) in [200, 302])

    xx_data = []
    hdr.reset()
    c.setopt(c.URL, data.xml_url(url + "Times/Keeping"))
    c.setopt(c.POST, 1)
    c.setopt(c.VERBOSE, 0)
    c.setopt(c.WRITEFUNCTION, lambda x: xx_data.append(x))
    c.setopt(c.POSTFIELDS, urllib.parse.urlencode(data.xml_data()))
    c.setopt(c.HTTPHEADER, [ 'X-Requested-With: XMLHttpRequest' ])
    c.setopt(c.HEADERFUNCTION, hdr.write)

    hdr.reset()
    c.perform()

    code = c.getinfo(c.HTTP_CODE)
    is_ok = False

    if code == 200:
        result = json.decoder.JSONDecoder().raw_decode(bytes.decode(b''.join(xx_data)))
        if args.batch:
            print('OK %s' % result[0]['Key'])
        else:
            print('submitted: %sTimes/Edit/%s' % (url, result[0]['Key']))

        is_ok = True
    elif code == 500:
        result = json.decoder.JSONDecoder().raw_decode(bytes.decode(b''.join(xx_data)))
        if args.batch:
            print("ERROR %s" % result[0]['Message'])
        else:
            print("%s %s" % (result[0]['MessageType'], result[0]['Message']))
    elif code == 400:
        if args.batch:
            print("BADTRANS %s" % hdr.get_status_msg())
        else:
            print("unexpeccte code %s" % code)
    else:
        if args.batch:
            print("BADCODE %s %s" % (code, xx_data))
        else:
            print("unexpeccte code %s" % code)

        exit(2)

    if not args.batch:
        xx_data = []
        c.setopt(c.URL, data.url_stats(url + "/Times/Stats?"))
        c.setopt(c.POST, 0)
        c.setopt(c.VERBOSE, 0)
        c.setopt(c.WRITEFUNCTION, lambda x: xx_data.append(x))
        c.setopt(c.POSTFIELDS, urllib.parse.urlencode(data.url_data()))

        hdr.reset()
        c.perform()
        assert(c.getinfo(c.HTTP_CODE) in [200, 302])

        print(json.decoder.JSONDecoder()
              .raw_decode(bytes.decode(b''.join(xx_data))))

    return is_ok

if __name__ == '__main__':
    if not main():
        exit(1)
